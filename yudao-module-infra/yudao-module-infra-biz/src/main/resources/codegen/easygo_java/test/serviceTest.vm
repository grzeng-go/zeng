package ${basePackage}.module.${table.moduleName}.service.${table.businessName};

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.mock.mockito.MockBean;

import javax.annotation.Resource;

import ${baseFrameworkPackage}.test.core.ut.BaseDbUnitTest;

import ${basePackage}.module.${table.moduleName}.controller.${sceneEnum.basePackage}.${table.businessName}.vo.*;
import ${basePackage}.module.${table.moduleName}.dal.dataobject.${table.businessName}.${table.className}DO;
import ${basePackage}.module.${table.moduleName}.dal.mysql.${table.businessName}.${table.className}Mapper;
import ${PageResultClassName};

import javax.annotation.Resource;
import org.springframework.context.annotation.Import;
import java.util.*;
import java.time.LocalDateTime;

import static cn.hutool.core.util.RandomUtil.*;
import static cn.iocoder.yudao.framework.common.util.date.LocalDateTimeUtils.buildBetweenTime;
import static ${basePackage}.module.${table.moduleName}.enums.ErrorCodeConstants.*;
import static ${baseFrameworkPackage}.test.core.util.AssertUtils.*;
import static ${baseFrameworkPackage}.test.core.util.RandomUtils.*;
import static ${ObjectUtilsClassName}.*;
import static ${DateUtilsClassName}.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

#foreach ($column in $columns)
#if (${column.columnType} == "1" )## 子业务对象
import ${basePackage}.module.${column.subModuleName}.controller.${column.subSceneEnum.basePackage}.${column.subBusinessName}.vo.*;
import ${basePackage}.module.${column.subModuleName}.dal.dataobject.${column.subBusinessName}.${column.className}DO;
import ${basePackage}.module.${column.subModuleName}.service.${column.subBusinessName}.*;
import ${basePackage}.module.${column.subModuleName}.convert.${column.subBusinessName}.${column.className}Convert;
#end
#end

## 字段模板
#macro(getPageCondition $VO)
       // mock 数据
       ${table.className}DO db${simpleClassName} = randomPojo(${table.className}DO.class, o -> { // 等会查询到
       #foreach ($column in $columns)
       #if (${column.listOperation})
       #set ($JavaField = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})##首字母大写
           o.set$JavaField(null);
       #end
       #end
       });
       ${classNameVar}Mapper.insert(db${simpleClassName});
       #foreach ($column in $columns)
       #if (${column.listOperation})
       #set ($JavaField = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})##首字母大写
       // 测试 ${column.javaField} 不匹配
       ${classNameVar}Mapper.insert(cloneIgnoreId(db${simpleClassName}, o -> o.set$JavaField(null)));
       #end
       #end
       // 准备参数
       ${sceneEnum.prefixClass}${table.className}${VO} reqVO = new ${sceneEnum.prefixClass}${table.className}${VO}();
       #foreach ($column in $columns)
       #if (${column.listOperation})
       #set ($JavaField = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})##首字母大写
       #if (${column.listOperationCondition} == "BETWEEN")## BETWEEN 的情况
       reqVO.set${JavaField}(buildBetweenTime(2023, 2, 1, 2023, 2, 28));
       #else
       reqVO.set$JavaField(null);
       #end
       #end
       #end
#end
/**
* {@link ${table.className}ServiceImpl} 的单元测试类
*
* @author ${table.author}
*/
@Import({${table.className}ServiceImpl.class#foreach ($column in $columns)#if (${column.columnType} == "1" ), ${column.className}ServiceImpl.class#end#end})
public class ${table.className}ServiceImplTest extends BaseDbUnitTest {

    @Resource
    private ${table.className}ServiceImpl ${classNameVar}Service;

    #foreach ($column in $columns)
    #if (${column.columnType} == "1" )
    @Resource
    private ${column.className}ServiceImpl ${column.lowClassName}Service;
    #end
    #end

    @Resource
    private ${table.className}Mapper ${classNameVar}Mapper;

    @Test
    public void testCreate${simpleClassName}_success() {
        // 准备参数
        ${sceneEnum.prefixClass}${table.className}CreateReqVO reqVO = randomPojo(${sceneEnum.prefixClass}${table.className}CreateReqVO.class, createReqVO -> {
            #foreach ($column in $columns)
            #if (${column.columnType} == "1" )## 子业务对象
            createReqVO.set${column.upJavaField}(randomPojoList(${column.className}CreateReqVO.class));
            #end
            #end
        });

        // 调用
        ${primaryColumn.javaType} ${classNameVar}Id = ${classNameVar}Service.create${simpleClassName}(reqVO);
        // 断言
        assertNotNull(${classNameVar}Id);
        // 校验记录的属性是否正确
        ${table.className}DO ${classNameVar} = ${classNameVar}Mapper.selectById(${classNameVar}Id);
        assertPojoEquals(reqVO, ${classNameVar}, "id");

        #foreach ($column in $columns)
        #if (${column.columnType} == "1" )## 子业务对象
        // 校验子业务对象属性是否正确
        List<${column.className}DO> ${column.lowClassName}DO = ${column.lowClassName}Service.getBy${column.upParentId}(${classNameVar}Id);
        assertCollectionPojoEquals(${column.className}Convert.INSTANCE.convertList03(reqVO.get${column.upJavaField}()), ${column.lowClassName}DO, (o1, o2) -> {
            assertNotNull(o1);
            assertNotNull(o2);
            return o1.getId().compareTo(o2.getId());
        }, "id", "createTime", "updateTime", "creator", "updater", "deleted");
        #end
        #end
    }

    @Test
    public void testUpdate${simpleClassName}_success() {
        // mock 数据
       // ${table.className}DO db${simpleClassName} = randomPojo(${table.className}DO.class);
       // ${classNameVar}Mapper.insert(db${simpleClassName});// @Sql: 先插入出一条存在的数据
        // mock 数据
        ${sceneEnum.prefixClass}${table.className}CreateReqVO mockData = randomPojo(${sceneEnum.prefixClass}${table.className}CreateReqVO.class, createReqVO -> {
            #foreach ($column in $columns)
            #if (${column.columnType} == "1" )## 子业务对象
            createReqVO.set${column.upJavaField}(randomPojoList(${column.className}CreateReqVO.class));
            #end
            #end
        });
        // 调用
        ${primaryColumn.javaType} ${classNameVar}Id = ${classNameVar}Service.create${simpleClassName}(mockData);
        // 准备参数
        ${sceneEnum.prefixClass}${table.className}UpdateReqVO reqVO = randomPojo(${sceneEnum.prefixClass}${table.className}UpdateReqVO.class, o -> {
            o.setId(${classNameVar}Id); // 设置更新的 ID

            #foreach ($column in $columns)
            #if (${column.columnType} == "1" )## 子业务对象
            List<${column.className}CreateReqVO> ${column.javaField} = mockData.get${column.upJavaField}();
            ${column.className}CreateReqVO remove${column.upJavaField} = ${column.javaField}.remove(0);
            List<${column.subPrimaryKeyColumn.javaType}> del${column.upJavaField}Ids = new ArrayList<>();
            del${column.upJavaField}Ids.add(remove${column.upJavaField}.getId());
            ${column.javaField}.get(0).setName("update");
            o.set${column.upJavaField}(${column.javaField});
            o.setDel${column.upJavaField}Ids(del${column.upJavaField}Ids);
            #end
            #end
        });

        // 调用
        ${classNameVar}Service.update${simpleClassName}(reqVO);
        // 校验是否更新正确
        ${table.className}DO ${classNameVar} = ${classNameVar}Mapper.selectById(reqVO.getId()); // 获取最新的
        assertPojoEquals(reqVO, ${classNameVar});

        #foreach ($column in $columns)
        #if (${column.columnType} == "1" )## 子业务对象
        // 校验子业务对象属性是否正确
        List<${column.className}DO> ${column.lowClassName}DO = ${column.lowClassName}Service.getBy${column.upParentId}(${classNameVar}Id);
        assertCollectionPojoEquals(${column.className}Convert.INSTANCE.convertList03(reqVO.get${column.upJavaField}()), ${column.lowClassName}DO, (o1, o2) -> {
            assertNotNull(o1);
            assertNotNull(o2);
            return o1.getId().compareTo(o2.getId());
        }, "id", "createTime", "updateTime", "creator", "updater", "deleted");
        #end
        #end
    }

    @Test
    public void testUpdate${simpleClassName}_notExists() {
        // 准备参数
        ${sceneEnum.prefixClass}${table.className}UpdateReqVO reqVO = randomPojo(${sceneEnum.prefixClass}${table.className}UpdateReqVO.class);

        // 调用, 并断言异常
        assertServiceException(() -> ${classNameVar}Service.update${simpleClassName}(reqVO), ${simpleClassName_underlineCase.toUpperCase()}_NOT_EXISTS);
    }

    @Test
    public void testDelete${simpleClassName}_success() {
        // mock 数据
        ${table.className}DO db${simpleClassName} = randomPojo(${table.className}DO.class);
        ${classNameVar}Mapper.insert(db${simpleClassName});// @Sql: 先插入出一条存在的数据
        // 准备参数
        ${primaryColumn.javaType} id = db${simpleClassName}.getId();

        // 调用
        ${classNameVar}Service.delete${simpleClassName}(id);
       // 校验数据不存在了
       assertNull(${classNameVar}Mapper.selectById(id));
    }

    @Test
    public void testDelete${simpleClassName}_notExists() {
        // 准备参数
        ${primaryColumn.javaType} id = random${primaryColumn.javaType}Id();

        // 调用, 并断言异常
        assertServiceException(() -> ${classNameVar}Service.delete${simpleClassName}(id), ${simpleClassName_underlineCase.toUpperCase()}_NOT_EXISTS);
    }

    @Test
    @Disabled  // TODO 请修改 null 为需要的值，然后删除 @Disabled 注解
    public void testGet${simpleClassName}Page() {
       #getPageCondition("PageReqVO")

       // 调用
       PageResult<${table.className}DO> pageResult = ${classNameVar}Service.get${simpleClassName}Page(reqVO);
       // 断言
       assertEquals(1, pageResult.getTotal());
       assertEquals(1, pageResult.getList().size());
       assertPojoEquals(db${simpleClassName}, pageResult.getList().get(0));
    }

    @Test
    @Disabled  // TODO 请修改 null 为需要的值，然后删除 @Disabled 注解
    public void testGet${simpleClassName}List() {
       #getPageCondition("ExportReqVO")

       // 调用
       List<${table.className}DO> list = ${classNameVar}Service.get${simpleClassName}List(reqVO);
       // 断言
       assertEquals(1, list.size());
       assertPojoEquals(db${simpleClassName}, list.get(0));
    }

}
